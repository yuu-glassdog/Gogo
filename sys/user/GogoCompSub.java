//====================================================================
//  Javaプログラミング中級
//--------------------------------------------------------------------
//  Gogo/GogoUser.java
//  WinXP  J2SDK 1.4.2_04
//--------------------------------------------------------------------
//  富永研究室
//--------------------------------------------------------------------
//  2005.05.31
//====================================================================


/*====================================================================
//  仕様
//====================================================================

ゲームの状態と直前の打手を引数として、calc_hand() で、次の打手を返す。
状態は、コピーなので、変更しても、オリジナルに影響を与えない。
マスタ側の情報は、全く参照することができない。
自分のプレイヤ側の情報は、ポケットを通して参照する。
戦略を実装するために、ルール処理のライブラリは、参照することができる。
棋譜履歴は、自分で格納しなければならない。

s00t000_00 のようなクラス名で、サブクラスを実装する。
thePlayer
====================================================================*/


//====================================================================
//  事前処理
//====================================================================

package sys.user;

import sys.game.*;
import sys.struct.GogoState;


//====================================================================
//  ユーザクラス GameCompSub
//====================================================================

public abstract class GogoCompSub extends GameCompSub { 

//====================================================================
//  クラス定数
//====================================================================


//====================================================================
//  インスタンス変数
//====================================================================

  public GogoCompSub(GamePlayer player) {
    super(player);
  }

//====================================================================
//  主要メソッド
//====================================================================

//====================================================================
//  補助メソッド
//====================================================================

//--------------------------------------------------------------------
//  自分の取石数を取得
//--------------------------------------------------------------------

  public int get_mystone(GameState prev) {
    return prev.get_pocket(role).point;
  }

//--------------------------------------------------------------------
//  相手の取石数を取得
//--------------------------------------------------------------------

  public int get_enemystone(GameState prev) {
    return prev.get_pocket(role*-1).point;
  }

//--------------------------------------------------------------------
//  自分の総取石数を取得
//--------------------------------------------------------------------

  public int get_total_mystone(GameState prev) {
    return prev.get_pocket(role).tpoint;
  }

//--------------------------------------------------------------------
//  相手の総取石数を取得
//--------------------------------------------------------------------

  public int get_total_enemystone(GameState prev) {
    return prev.get_pocket(role*-1).tpoint;
  }

//====================================================================
//  終了
//====================================================================

}
